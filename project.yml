title: " NER - Savoirs/EHESS "
author: "Alex Soares / Carmen Brando"
description: "A NER - Savoirs is project that recognises entities LOC and PER in an existing pretrained pipeline. All other pipeline components are preserved and frozen during training."
spacy_version: ">=3.0.6,<4.0.0"
# Variables can be referenced across the project.yml using ${vars.var_name}
vars:
  name: "ner_savoirs"
  lang: "fr"
  pipeline: "fr_core_news_sm"
  train: "train.json"
  dev: "dev.json"
  version: "0.0.0"
  # Set your GPU ID, -1 is CPU
  gpu_id: -1

# These are the directories that the project needs. The project CLI will make
# sure that they always exist.
directories: ["assets", "corpus", "configs", "training", "scripts", "packages"]

# Assets that should be downloaded or available in the directory. We're shipping
# them with the project, so they won't have to be downloaded.
assets:
  - dest: "assets/train.json"
    description: "training data converted from the v2 example scripts with `srsly.write_json(\"train.json\", TRAIN_DATA)`"
  - dest: "assets/dev.json"
    description: "development data"

# Workflows are sequences of commands (see below) executed in order. You can
# run them via "spacy project run [workflow]". If a commands's inputs/outputs
# haven't changed, it won't be re-run.
workflows:
  all:
    - train
    - evaluate

# Project commands, specified in a style similar to CI config files (e.g. Azure
# pipelines). The name is the command name that lets you trigger the command
# via "spacy project run [command] [path]". The help message is optional and
# shown when executing "spacy project run [optional command] [path] --help".
commands:
  
  - name: "train"
    help: "Update the NER - Savoirs model"
    script:
      - "python -m spacy train configs/config.cfg --output training/ --paths.train corpus/train.spacy --paths.dev corpus/dev.spacy --training.eval_frequency 10 --training.max_steps 100 --gpu-id ${vars.gpu_id}"
    deps:
      - "configs/config.cfg"
      - "corpus/train.spacy"
      - "corpus/dev.spacy"
    outputs:
      - "training/model-best"

  - name: "evaluate"
    help: "Evaluate the model and export metrics"
    script:
      - "python -m spacy evaluate training/model-best corpus/dev.spacy --output training/metrics.json"
    deps:
      - "corpus/dev.spacy"
      - "training/model-best"
    outputs:
      - "training/metrics.json"

  - name: "package"
    help: "Package the trained model so it can be installed"
    script:
      - "python -m spacy package training/model-best packages --name ${vars.name} --version ${vars.version} --force"
    deps:
      - "training/model-best"
    outputs_no_cache:
      - "packages/en_${vars.name}-${vars.version}/dist/en_${vars.name}-${vars.version}.tar.gz"

  - name: "visualize-model"
    help: "Visualize the model's output interactively using Streamlit"
    script:
      - "streamlit run scripts/visualize_model.py training/model-best \"Bourdieu vivait Ã  Paris.\""
    deps:
      - "scripts/visualize_model.py"
      - "training/model-best"

  - name: "visualize-data"
    help: "Explore the annotated data in an interactive Streamlit app"
    script:
      - "streamlit run scripts/visualize_data.py assets/${vars.train},assets/${vars.dev}"
    deps:
      - "scripts/visualize_data.py"
      - "assets/${vars.train}"
      - "assets/${vars.dev}"
